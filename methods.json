{
  "Foo": {
    "name": "@name",
    "name=": "|name|\n\t@name=name",
    "yell": "'HELLO THERE'",
    "yolo": "'YOLO!'"
  },
  "MyWebApp": {
    "go": "@thr = Thread.new { self.run!(:server => 'thin') }",
    "thr": "@thr",
    "set_routes": "self.get('/') { 'hello, world!' }",
    "say_hello": "'hello, world (again)!'",
    "print_all_classes": "all_modules.sort{|x, y| x.to_s <=> y.to_s}.join('<br>')",
    "main_page": "ModuleList.new.render",
    "class_lookup": "klass = params[:name].as_class; if klass.nil?; 'no such class'; else; klass.render; end;"
  },
  "String": {
    "as_list_item": "\"<li>#{self.as_class_link}</li>\"",
    "as_class": "begin; return Kernel.const_get(self); rescue; nil; end; ",
    "as_class_link": "\"<a href=\\\"/class/#{self}\\\">#{self}</a>\""
  },
  "ModuleList": {
    "render": "modules = all_modules.collect {|mod| mod.to_s.as_list_item}.join; \"<h1>Modules</h1><ul>#{modules}</ul>\"",
    "initialize": "|root| @listbox = TkListbox.new(root) do; listvariable TkVariable.new(all_modules.collect{|m| m.to_s });  pack; end;",
    "listbox": "@listbox",
    "onselect": "|blk| @listbox.bind('<ListboxSelect>', blk)",
    "selected_module": "@selected_module = Module.const_get(@listbox.get(@listbox.curselection))"
  },
  "Class": {
    "render": "\"<h1>#{self.name}</h1>#{self.render_methods}\"",
    "render_methods": "instance_method_list.collect {|k,m| \"<h2>#{k}</h2><pre>#{m}</pre>\" }.join"
  },
  "MyHipchat": {
    "initialize": "@token = '7810024d94df2eb7bbf653e97d6afe'; @client = HipChat::Client.new(@token); ",
    "notify_room": "|msg| @client['BlocHQ'].send('RubyTalk', msg, :color => 'green'); "
  },
  "TableView": {
    "initialize": "|data| @data = data",
    "data": "@data",
    "render": "\"<table>#{@data.collect {|d| TableRow.new(d).render }.join}</table>\""
  },
  "TableRow": {
    "initialize": "|data| @data = data",
    "render": "rows = @data.collect { |d| \"<td>#{d}</td>\"}.join; \"<tr>#{rows}</tr>\""
  },
  "SystemBrowser": {
    "initialize": "|root| \n\n@window = TkToplevel.new(root) do; title 'System Browser'; end; \n\n@module_list = RubyTalkGUI::ModuleList.new(@window); \n\n@module_list.onselect(\n  lambda {\n    @editor.delete('1.0', 'end'); \n    methods = @module_list.selected_module.instance_method_list.keys; \n    @instance_method_list.set_methods(methods); \n    puts methods.inspect;\n    @selected_module = @module_list.selected_module;\n  }\n); \n\n@instance_method_list = InstanceMethodList.new(@window); \n\n@instance_method_list.onselect(\n  lambda {\n    method_name = @instance_method_list.listbox.get(@instance_method_list.listbox.curselection); \n    method = @selected_module.instance_method_list[method_name.to_sym];\n    puts method\n    @editor.delete('1.0', 'end'); \n    @editor.insert('1.0', method); \n  }\n); \n\n@editor = TkText.new(@window) do; width 30; height 20; borderwidth 1; pack; end;"
  },
  "RubyTalkGUI": {
    "new_system_browser": "SystemBrowser.new(@root);"
  },
  "InstanceMethodList": {
    "initialize": "|root| @listbox = TkListbox.new(root) do; pack; end;",
    "set_methods": "|list| @listbox.listvariable TkVariable.new(list);",
    "onselect": "|blk| @listbox.bind('<ListboxSelect>', blk)",
    "listbox": "@listbox"
  }
}