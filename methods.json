{
  "Foo": {
    "name": "@name",
    "name=": "|name|\n\t@name=name",
    "yell": "'HELLO THERE'",
    "yolo": "'YOLO!'",
    "hello": "\"hi!\"\n",
    "goodbye": ""
  },
  "MyWebApp": {
    "go": "@thr = Thread.new { self.run!(:server => 'thin') }",
    "thr": "@thr",
    "set_routes": "self.get('/') { 'hello, world!' }",
    "say_hello": "'hello, world (again)!'",
    "print_all_classes": "all_modules.sort{|x, y| x.to_s <=> y.to_s}.join('<br>')",
    "main_page": "ModuleList.new.render",
    "class_lookup": "klass = params[:name].as_class; if klass.nil?; 'no such class'; else; klass.render; end;"
  },
  "String": {
    "as_list_item": "\"<li>#{self.as_class_link}</li>\"",
    "as_class": "begin; return Kernel.const_get(self); rescue; nil; end; ",
    "as_class_link": "\"<a href=\\\"/class/#{self}\\\">#{self}</a>\""
  },
  "ModuleList": {
    "render": "modules = all_modules.collect {|mod| mod.to_s.as_list_item}.join; \"<h1>Modules</h1><ul>#{modules}</ul>\"",
    "initialize": "\n|root| \n\n@listbox = TkListbox.new(root) do \n  listvariable TkVariable.new(all_classes.collect{|m| m.to_s }.sort{|x, y| x.to_s <=> y.to_s})\n  width 35\n  height 25\n  pack('side' => 'left', 'fill' => 'y')\nend\n\n\n\n\n",
    "listbox": "@listbox",
    "onselect": "|blk| @listbox.bind('<ListboxSelect>', blk)",
    "selected_module": "@selected_module = Module.const_get(@listbox.get(@listbox.curselection))",
    "hello": "\"hi\"\n",
    "reselect": "puts self.listbox.index(selected_module.to_s)\n"
  },
  "Class": {
    "render": "\"<h1>#{self.name}</h1>#{self.render_methods}\"",
    "render_methods": "instance_method_list.collect {|k,m| \"<h2>#{k}</h2><pre>#{m}</pre>\" }.join"
  },
  "MyHipchat": {
    "initialize": "@token = '7810024d94df2eb7bbf653e97d6afe'; @client = HipChat::Client.new(@token); ",
    "notify_room": "|msg| @client['BlocHQ'].send('RubyTalk', msg, :color => 'green'); "
  },
  "TableView": {
    "initialize": "|data| @data = data",
    "data": "@data",
    "render": "\"<table>#{@data.collect {|d| TableRow.new(d).render }.join}</table>\""
  },
  "TableRow": {
    "initialize": "|data| @data = data",
    "render": "rows = @data.collect { |d| \"<td>#{d}</td>\"}.join; \"<tr>#{rows}</tr>\""
  },
  "SystemBrowser": {
    "initialize": "\n|root| \n\n@window = TkToplevel.new(root) do \n  title 'System Browser'\nend\n\n@module_list = RubyTalkGUI::ModuleList.new(@window)\n\n@module_list.onselect(\n  lambda {\n    @editor.clear\n    methods = @module_list.selected_module.instance_method_list.keys\n    @instance_method_list.set_methods(methods)\n    puts methods.inspect\n    @selected_module = @module_list.selected_module\n  }\n)\n\n@instance_method_list = InstanceMethodList.new(@window)\n\n@instance_method_list.onselect(\n  lambda {\n    method_name = @instance_method_list.selected_method    \n    @selected_method_name = method_name\n    method = @selected_module.instance_method_list[method_name.to_sym]\n    puts method\n    @editor.set_text(method)\n  }\n)\n\n@new_method_name = TkEntry.new(@window) do\n  text '<method name>'\n  pack('side' => 'left')\nend\n\n@new_method_btn = TkButton.new(@window) do\n  text \"New Method\"\n  pack('side' => 'left')\nend\n\n@new_method_btn.command do\n  method_name = @new_method_name.get()\n  if method_name == \"\"\n    raise \"Blank Method Name\"\n  end\n  @new_method_name.delete('0', 'end')\n  puts method_name\n  @selected_module.define_instance_method_from_string(method_name.to_sym, \"\")\nend\n\n@delete_method_btn = TkButton.new(@window) do\n  text \"Delete Method\"\n  pack('side' => 'left')\nend\n\n@delete_method_btn.command do\n  method_name = @instance_method_list.selected_method\n  mod = @selected_module\n  mod.undefine_instance_method(method_name.to_sym)\nend\n\n\n@accept_button = TkButton.new(@window) do\n  text 'Accept'\n  state 'normal'\n  borderwidth 1\n  pack('side' => 'bottom')\nend\n\n@accept_button.command do\n  text = @editor.get_text\n  sel_module = @selected_module\n  method_name = @selected_method_name\n  @selected_module.define_instance_method_from_string(method_name.to_sym, text)\nend\n\n@editor = Editor.new(@window)\n\n\n\n\n\n\n\n\n\n",
    "reselect_module": "\"deprecated\"\n",
    "test_method": "",
    "foobar": ""
  },
  "RubyTalkGUI": {
    "new_system_browser": "SystemBrowser.new(@root);"
  },
  "InstanceMethodList": {
    "initialize": "|root| \n  @listbox = TkListbox.new(root) do\n    width 35\n    height 25\n    pack('side' => 'left', 'fill' => 'both') \n  end\n\n\n\n",
    "set_methods": "|list| @listbox.listvariable TkVariable.new(list);",
    "onselect": "|blk| @listbox.bind('<ListboxSelect>', blk)",
    "listbox": "@listbox",
    "selected_method": "@selected_method = @listbox.get(@listbox.curselection)\n"
  },
  "Workspace": {
    "initialize": "|root|\n@parent = root\n@window = TkToplevel.new(root) { title 'Workspace' }\n\n@workspace = TkText.new(@window) do\n  width 50\n  height 10\n  borderwidth 1\n  pack('side' => 'top', 'padx' => '5', 'pady' => '5', 'fill' => 'both')\nend\n\n@doit_button = TkButton.new(@window) do\n  text 'Do it'\n  borderwidth 1\n  state 'normal'\n  pack('side' => 'bottom')\nend\n\n@doit_button.command do\n  result = eval(@workspace.get('1.0', 'end'))\n  @workspace.insert('insert', result)\nend\n\n\n\n\n\n",
    "root": "@parent\n",
    "parent": "@parent\n"
  },
  "Editor": {
    "initialize": "\n|root|\n\n@editor = TkText.new(root) do\n  width 65\n  height 25\n  undo true\n  pack('fill' => 'both')\nend\n\n\n\n\n",
    "set_text": "\n|text|\n  @editor.delete('1.0', 'end')\n  @editor.insert('1.0', text)\n",
    "get_text": "\n  @editor.get('1.0', 'end')\n\n",
    "clear": "@editor.delete('1.0', 'end')"
  },
  "ThreadList": {
    "initialize": "|root|\n\n  @window = TkToplevel.new(root) { title \"Thread List\" }\n\n  @listbox = TkListbox.new(@window) do\n    height 15\n    width 35\n    threads = Thread.list.collect {|t| t.to_s }\n    listvariable TkVariable.new(threads)\n    pack\n  end\n"
  },
  "Bar": {
  },
  "TodoList": {
    "initialize": "|root|\n\n  @window = TkToplevel.new(root) { title \"Todo List\" }\n  @TkText = TkText.new(@window) do\n    height 15\n    width 35\n    pack('fill' => 'both')\n  end\n"
  },
  "Data": {
    "foobar": "",
    "render": "\"foobaf\"\n"
  },
  "Object": {
  },
  "ObjectSerializer": {
    "initialize": "|obj|\n\n  @output = {\n    :name => obj.name.to_s,\n    :instance_methods => obj.instance_method_list,\n    :superclass_name => obj.superclass.name.to_s,\n    :class_methods => obj.class_method_list\n  }\n\n",
    "output": "@output\n",
    "initialize": "|obj|\n\n  @output = {\n    :name => obj.name.to_s,\n    :class_name => obj.class.name.to_s,\n    :instance_methods => obj.instance_method_list,\n    :superclass_name => obj.superclass.name.to_s,\n    :class_methods => obj.class_method_list\n  }\n\n"
  }
}